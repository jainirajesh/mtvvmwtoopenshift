---
- name: Cutover plans based on scheduled time from survey input
  hosts: localhost
  gather_facts: false

  vars:
    csv_file: "../vm_list_to_migrate.csv"
    mtv_namespace: "openshift-mtv"
    
    # Injected via AAP Survey
    survey_plan_names: "{{ survey_plan_names | default('') }}"  # e.g., "lin-plan-00002,win-plan-02"
    cutover_time: "{{ cutover_time | default('') }}"            # e.g., "2025-07-09T08:30:00Z"

    plan_names: "{{ (survey_plan_names | default('')) | split(',') | map('trim') | list }}"

  tasks:
    - name: Read and parse the CSV file
      community.general.read_csv:
        path: "{{ csv_file }}"
      register: vm_list

    - name: Extract unique valid plan names from CSV
      set_fact:
        valid_plan_names: "{{ vm_list.list | map(attribute='Plan Name') | unique | list }}"

    - name: Validate plan names against CSV
      fail:
        msg: "The following plan names are not found in the CSV: {{ plan_names | difference(valid_plan_names) }}"
      when: plan_names | difference(valid_plan_names) | length > 0

    - name: Filter rows matching plan names
      set_fact:
        filtered_vms: "{{ vm_list.list | selectattr('Plan Name', 'in', plan_names) | list }}"

    - name: Extract final list of filtered unique plans
      set_fact:
        filtered_plans: "{{ filtered_vms | map(attribute='Plan Name') | unique | list }}"

    - name: Convert cutover_time to epoch
      set_fact:
        cutover_epoch: "{{ (cutover_time | to_datetime('%Y-%m-%dT%H:%M:%SZ')).timestamp() | int }}"
    
    - name: Wait until cutover time
      wait_for:
        timeout: "{{ cutover_epoch - (now().timestamp() | int) }}"
      when: cutover_epoch > (now().timestamp() | int)

    - name: Cutover each validated plan
      include_tasks: include/03_2_patch_cutover_task.yml
      loop: "{{ filtered_plans }}"
      loop_control:
        loop_var: plan_name
