---
- name: Cutover plans based on scheduled time from survey input
  hosts: localhost
  gather_facts: false

  vars:
    csv_file: "../vm_list_to_migrate.csv"
    mtv_namespace: "openshift-mtv"

    # Plan names from survey input, safely split and trimmed
    plan_names: "{{ (survey_plan_names | default('') | string) | split(',') | map('trim') | list }}"

  tasks:
    - name: Read and parse the CSV file
      community.general.read_csv:
        path: "{{ csv_file }}"
      register: vm_list

    - name: Extract unique valid plan names from CSV
      set_fact:
        valid_plan_names: "{{ vm_list.list | map(attribute='Plan Name') | unique | list }}"

    - name: Validate plan names against CSV
      fail:
        msg: "❌ The following plan names are not found in the CSV: {{ plan_names | difference(valid_plan_names) }}"
      when: plan_names | difference(valid_plan_names) | length > 0

    - name: Filter rows matching plan names
      set_fact:
        filtered_vms: "{{ vm_list.list | selectattr('Plan Name', 'in', plan_names) | list }}"

    - name: Extract final list of filtered unique plans
      set_fact:
        filtered_plans: "{{ filtered_vms | map(attribute='Plan Name') | unique | list }}"
    
    - name: Convert cutover_time to epoch (UTC)
      set_fact:
        cutover_epoch: "{{ (cutover_time | string | trim | to_datetime('%Y-%m-%dT%H:%M:%SZ')).timestamp() | float | int }}"

    - name: Get current epoch time (UTC-safe)
      set_fact:
        now_epoch: "{{ (now('utc').timestamp() | float | int) }}"

    - name: Calculate timeout duration
      set_fact:
        cutover_timeout: "{{ (cutover_epoch | int) - (now_epoch | int) }}"

    - name: Debug cutover and current time details
      debug:
        msg:
          - "📅 Cutover Time (UTC): {{ cutover_time }}"
          - "⏱️ Cutover Epoch: {{ cutover_epoch }}"
          - "🕒 Current UTC Epoch: {{ now_epoch }}"
          - "⌛ Timeout (sec): {{ cutover_timeout }}"
    
    - name: Debug final cutover timeout
      debug:
        msg: "🕒 Waiting {{ cutover_timeout | int }} seconds until scheduled cutover..."
      when: (cutover_timeout | int) > 0

    - name: Wait until cutover time
      wait_for:
        timeout: "{{ cutover_timeout | int }}"
      when: (cutover_timeout | int) > 0
 
    - name: Get all Migration CRs in the namespace
      kubernetes.core.k8s_info:
        api_version: forklift.konveyor.io/v1beta1
        kind: Migration
        namespace: "{{ mtv_namespace }}"
      register: all_migrations

    - name: Cutover each validated plan
      include_tasks: include/03_2_patch_cutover_task.yml
      loop: "{{ filtered_plans }}"
      loop_control:
        loop_var: plan_name
