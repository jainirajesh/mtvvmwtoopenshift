---
- name: Auto cutover plans based on CSV-scheduled time per plan
  hosts: localhost
  gather_facts: false

  vars:
    csv_file: "../vm_list_to_migrate.csv"
    mtv_namespace: "openshift-mtv"

  tasks:
    - name: Read CSV content (base64)
      slurp:
        src: "{{ csv_file }}"
      register: raw_csv

    - name: Decode and split CSV into lines
      set_fact:
        csv_lines: "{{ raw_csv.content | b64decode | regex_findall('.*') }}"

    - name: Extract CSV headers
      set_fact:
        csv_headers: "{{ csv_lines[0].split(',') | map('trim') | list }}"

    - name: Parse each row into a dictionary
      set_fact:
        all_rows: "{{ all_rows | default([]) + [dict(csv_headers | zip(row.split(',') | map('trim') | list))] }}"
      loop: "{{ csv_lines[1:] }}"
      loop_control:
        loop_var: row
      when: row.strip() != ''

    - name: Extract unique plans with cutover times
      set_fact:
        plan_cutover_list: "{{ 
          [
            dict(row, cutover_time=row['Cutover Time']) 
            for plan_name in (all_rows | map(attribute='Plan Name') | unique)
            for row in (all_rows | selectattr('Plan Name', 'equalto', plan_name) | list)[:1]
          ]
        }}"

    - name: Debug plan_cutover_list
      debug:
        var: plan_cutover_list

    - name: Process each plan for cutover timing and patch
      include_tasks: include/cutover_per_plan.yml
      loop: "{{ plan_cutover_list }}"
      loop_control:
        loop_var: plan_entry
      vars:
        plan_name: "{{ plan_entry['Plan Name'] }}"
        cutover_time_str: "{{ plan_entry['cutover_time'] | trim }}"
        mtv_namespace: "{{ mtv_namespace }}"
