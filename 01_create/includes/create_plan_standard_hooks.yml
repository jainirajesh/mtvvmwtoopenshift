- name: Create NetworkMap
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: NetworkMap
      metadata:
        name: "netmap-{{ plan_group.key | lower }}"
        namespace: "{{ mtv_namespace }}"
      spec:
        provider:
          source:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ source_provider_name }}"
            namespace: "{{ mtv_namespace }}"
            uid: "{{ source_provider_uid }}"
          destination:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ destination_provider_name }}"
            namespace: "{{ mtv_namespace }}"
            uid: "{{ destination_provider_uid }}"
        map:
          - source:
              id: "{{ source_networkmap_id }}"
            destination:
              name: "{{ target_networkmap }}"
              namespace: "{{ target_network_namespace }}"
              type: multus

- name: Create StorageMap
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: StorageMap
      metadata:
        name: "storagemap-{{ plan_group.key | lower }}"
        namespace: "{{ mtv_namespace }}"
      spec:
        provider:
          source:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ source_provider_name }}"
            namespace: "{{ mtv_namespace }}"
            uid: "{{ source_provider_uid }}"
          destination:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ destination_provider_name }}"
            namespace: "{{ mtv_namespace }}"
            uid: "{{ destination_provider_uid }}"
        map:
          - source:
              id: "{{ source_storagemap_id }}"
            destination:
              storageClass: "{{ target_storage }}"

- name: Read PreHook playbook from file
  slurp:
    src: includes/hooks/pre_create.yml
  register: prehook_playbook_file

- name: Create PreHook from playbook file
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: Hook
      metadata:
        name: prehook-{{ plan_group.key | lower }}
        namespace: "{{ mtv_namespace }}"
      spec:
        image: quay.io/konveyor/hook-runner:latest
        custom: true
        playbook: "{{ prehook_playbook_file.content | b64decode }}"
        targetNamespace: "{{ mtv_namespace }}"

- name: Read PostHook playbook from file
  slurp:
    src: includes/hooks/post_create.yml
  register: posthook_playbook_file

- name: Create PostHook from playbook file
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: Hook
      metadata:
        name: posthook-{{ plan_group.key | lower }}
        namespace: "{{ mtv_namespace }}"
      spec:
        image: quay.io/konveyor/hook-runner:latest
        custom: true
        playbook: "{{ posthook_playbook_file.content | b64decode }}"
        targetNamespace: "{{ mtv_namespace }}"

- name: Create migration Plan
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: Plan
      metadata:
        name: "{{ plan_group.key }}"
        namespace: "{{ mtv_namespace }}"
        annotations:
          migration.konveyor.io/pre-hook: "prehook-{{ plan_group.key | lower }}"
          migration.konveyor.io/post-hook: "posthook-{{ plan_group.key | lower }}"
          populatorLabels: "True"
      spec:
        provider:
          source:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ source_provider_name }}"
            namespace: "{{ mtv_namespace }}"
            uid: "{{ source_provider_uid }}"
          destination:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ destination_provider_name }}"
            namespace: "{{ mtv_namespace }}"
            uid: "{{ destination_provider_uid }}"
        map:
          network:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: NetworkMap
            name: "netmap-{{ plan_group.key | lower }}"
            namespace: "{{ mtv_namespace }}"
          storage:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: StorageMap
            name: "storagemap-{{ plan_group.key | lower }}"
            namespace: "{{ mtv_namespace }}"
        targetNamespace: "{{ plan_group.value.rows[0]['Target Namespace'] }}"
        preserveStaticIPs: true
        warm: "{{ plan_group.value.is_warm }}"
        pvcNameTemplateUseGenerateName: true
        vms: >-
          {{
            plan_group.value.vms | map('combine', {
              'hooks': [
                {
                  'hook': {
                    'name': 'prehook-' ~ plan_group.key | lower,
                    'namespace': mtv_namespace
                  },
                  'step': 'PreHook'
                },
                {
                  'hook': {
                    'name': 'posthook-' ~ plan_group.key | lower,
                    'namespace': mtv_namespace
                  },
                  'step': 'PostHook'
                }
              ]
            }) | list
          }}

- name: Wait until Plan is Ready
  kubernetes.core.k8s_info:
    api_version: forklift.konveyor.io/v1beta1
    kind: Plan
    name: "{{ plan_group.key }}"
    namespace: "{{ mtv_namespace }}"
  register: plan_info
  retries: 20
  delay: 5
  until: >
    plan_info.resources | length > 0 and
    ('status' in plan_info.resources[0]) and
    (
      plan_info.resources[0].status.conditions |
      selectattr('type', 'equalto', 'Ready') |
      selectattr('status', 'equalto', 'True') |
      list | length > 0
    )

- name: Get Plan UID
  set_fact:
    plan_uid: "{{ plan_info.resources[0].metadata.uid }}"

- name: Patch ownerReference in NetworkMap
  kubernetes.core.k8s:
    state: patched
    kind: NetworkMap
    api_version: forklift.konveyor.io/v1beta1
    name: "netmap-{{ plan_group.key | lower }}"
    namespace: "{{ mtv_namespace }}"
    merge_type: merge
    definition:
      metadata:
        ownerReferences:
          - apiVersion: forklift.konveyor.io/v1beta1
            kind: Plan
            name: "{{ plan_group.key }}"
            uid: "{{ plan_uid }}"
            controller: true
            blockOwnerDeletion: true

- name: Patch ownerReference in StorageMap
  kubernetes.core.k8s:
    state: patched
    kind: StorageMap
    api_version: forklift.konveyor.io/v1beta1
    name: "storagemap-{{ plan_group.key | lower }}"
    namespace: "{{ mtv_namespace }}"
    merge_type: merge
    definition:
      metadata:
        ownerReferences:
          - apiVersion: forklift.konveyor.io/v1beta1
            kind: Plan
            name: "{{ plan_group.key }}"
            uid: "{{ plan_uid }}"
            controller: true
            blockOwnerDeletion: true
