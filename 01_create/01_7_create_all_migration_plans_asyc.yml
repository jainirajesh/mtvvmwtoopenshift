- name: Create multiple migration plans from CSV
  hosts: localhost
  gather_facts: false

  vars_files:
    - ../vars.yaml

  tasks:
    - name: Read CSV content (base64)
      slurp:
        src: ../vm_list_to_migrate.csv
      register: raw_csv

    - name: Decode and split CSV into lines
      set_fact:
        csv_lines: "{{ raw_csv.content | b64decode | regex_findall('.*') }}"

    - name: Extract CSV headers
      set_fact:
        csv_headers: "{{ csv_lines[0].split(',') | map('trim') | list }}"

    - name: Parse each row into a dictionary
      set_fact:
        all_rows: "{{ all_rows | default([]) + [dict(csv_headers | zip(row.split(',') | map('trim') | list))] }}"
      loop: "{{ csv_lines[1:] }}"
      loop_control:
        loop_var: row
      when: row.strip() != ''

    - name: Group VMs by Plan Name
      set_fact:
        plans_dict: "{{ plans_dict | default({}) | combine({ item['Plan Name']: (plans_dict[item['Plan Name']] | default([])) + [item] }) }}"
      loop: "{{ all_rows }}"
      loop_control:
        label: "{{ item['Plan Name'] }}"

    - name: Construct VM objects and update plans_with_vms with is_warm flag
      set_fact:
        plans_with_vms: "{{ plans_with_vms | default({}) | combine({ item.key: {
          'vms': vm_list,
          'rows': item.value,
          'is_warm': (item.value[0]['Cold or Warm'] | lower == 'warm')
        } }) }}"
      vars:
        vm_list: >-
          {%- set result = [] -%}
          {%- for row in item.value -%}
          {%-   set _ = result.append({ 'name': row['RHOS Name'], 'id': row['VM ID'] }) -%}
          {%- endfor -%}
          {{ result }}
      loop: "{{ plans_dict | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

    - name: Create migration plans in parallel
      # Loop over each plan group and create necessary resources
      - name: Create NetworkMap for {{ item.key | lower }}
        kubernetes.core.k8s:
          state: present
          definition:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: NetworkMap
            metadata:
              name: "netmap-{{ item.key | lower }}"
              namespace: "{{ mtv_namespace }}"
            spec:
              provider:
                source:
                  apiVersion: forklift.konveyor.io/v1beta1
                  kind: Provider
                  name: "{{ source_provider_name }}"
                  namespace: "{{ mtv_namespace }}"
                  uid: "{{ source_provider_uid }}"
                destination:
                  apiVersion: forklift.konveyor.io/v1beta1
                  kind: Provider
                  name: "{{ destination_provider_name }}"
                  namespace: "{{ mtv_namespace }}"
                  uid: "{{ destination_provider_uid }}"
              map:
                - source:
                    id: "{{ source_networkmap_id }}"
                  destination:
                    name: "{{ target_networkmap }}"
                    namespace: "{{ target_network_namespace }}"
                    type: multus
        async: 300
        poll: 0
        register: networkmap_job

      - name: Create StorageMap for {{ item.key | lower }}
        kubernetes.core.k8s:
          state: present
          definition:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: StorageMap
            metadata:
              name: "storagemap-{{ item.key | lower }}"
              namespace: "{{ mtv_namespace }}"
            spec:
              provider:
                source:
                  apiVersion: forklift.konveyor.io/v1beta1
                  kind: Provider
                  name: "{{ source_provider_name }}"
                  namespace: "{{ mtv_namespace }}"
                  uid: "{{ source_provider_uid }}"
                destination:
                  apiVersion: forklift.konveyor.io/v1beta1
                  kind: Provider
                  name: "{{ destination_provider_name }}"
                  namespace: "{{ mtv_namespace }}"
                  uid: "{{ destination_provider_uid }}"
              map:
                - source:
                    id: "{{ source_storagemap_id }}"
                  destination:
                    storageClass: "{{ target_storage }}"
        async: 300
        poll: 0
        register: storagemap_job

      - name: Create Migration Plan for {{ item.key | lower }}
        kubernetes.core.k8s:
          state: present
          definition:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Plan
            metadata:
              name: "{{ item.key }}"
              namespace: "{{ mtv_namespace }}"
            spec:
              provider:
                source:
                  apiVersion: forklift.konveyor.io/v1beta1
                  kind: Provider
                  name: "{{ source_provider_name }}"
                  namespace: "{{ mtv_namespace }}"
                  uid: "{{ source_provider_uid }}"
                destination:
                  apiVersion: forklift.konveyor.io/v1beta1
                  kind: Provider
                  name: "{{ destination_provider_name }}"
                  namespace: "{{ mtv_namespace }}"
                  uid: "{{ destination_provider_uid }}"
              map:
                network:
                  apiVersion: forklift.konveyor.io/v1beta1
                  kind: NetworkMap
                  name: "netmap-{{ item.key | lower }}"
                  namespace: "{{ mtv_namespace }}"
                storage:
                  apiVersion: forklift.konveyor.io/v1beta1
                  kind: StorageMap
                  name: "storagemap-{{ item.key | lower }}"
                  namespace: "{{ mtv_namespace }}"
              targetNamespace: "{{ item.value.rows[0]['Target Namespace'] }}"
              pvcNameTemplateUseGenerateName: true
              preserveStaticIPs: true
              migrateSharedDisks: true
              warm: "{{ item.value.is_warm }}"
              vms: "{{ item.value.vms }}"
        async: 300
        poll: 0
        register: plan_job

      - name: Wait for all tasks to complete
        async_status:
          jid: "{{ item.ansible_job_id }}"
        loop:
          - "{{ networkmap_job }}"
          - "{{ storagemap_job }}"
          - "{{ plan_job }}"
        register: job_results
        until: job_results.results | selectattr('finished', 'defined') | length == 3
        retries: 10
        delay: 10

      loop: "{{ plans_with_vms | dict2items }}"
      loop_control:
        loop_var: item
