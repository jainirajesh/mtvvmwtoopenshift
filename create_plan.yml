---
- name: VM Migration Plan with manual CSV parsing (AAP compatible)
  hosts: localhost
  gather_facts: false

  vars_files:
    - vars.yaml  # define your variables here: plan_name, mtv_namespace, source_provider_name, destination_provider_name, network_map_name, storage_map_name, target_network_namespace

  tasks:
    - name: Read CSV content (base64)
      slurp:
        src: migration_plan.csv
      register: raw_csv

    - name: Decode and split CSV into lines
      set_fact:
        csv_lines: "{{ raw_csv.content | b64decode | regex_findall('.*') }}"

    - name: Extract CSV headers
      set_fact:
        csv_headers: "{{ csv_lines[0].split(',') | map('trim') | list }}"

    - name: Initialize empty migration_data list
      set_fact:
        migration_data: []

    - name: Convert each CSV row to dictionary and append to migration_data
      set_fact:
        migration_data: "{{ migration_data + [dict(csv_headers | zip(row | split(',') | map('trim') | list))] }}"
      loop: "{{ csv_lines[1:] }}"
      loop_control:
        loop_var: row
      when: row.strip() != ''  # âœ… Skip empty lines

    - name: Show parsed migration data
      debug:
        var: migration_data

    - name: Build Forklift VM list from "RHOS Name" column
      set_fact:
        vm_list: "{{ migration_data | map(attribute='RHOS Name') | map('regex_replace', '^(.+)$', '{\"name\":\"\\1\"}') | map('from_json') | list }}"

    - name: Debug VM list
      debug:
        var: vm_list

    - name: Create Forklift Migration Plan
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: Plan
          metadata:
            name: "{{ plan_name }}"
            namespace: "{{ mtv_namespace }}"
          spec:
            provider:
              source:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ source_provider_name }}"
                namespace: "{{ mtv_namespace }}"
              destination:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ destination_provider_name }}"
                namespace: "{{ mtv_namespace }}"
            map:
              network:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: NetworkMap
                name: "{{ network_map_name }}-{{ plan_name }}"
                namespace: "{{ mtv_namespace }}"
              storage:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: StorageMap
                name: "{{ storage_map_name }}-{{ plan_name }}"
                namespace: "{{ mtv_namespace }}"
            namespace: "{{ mtv_namespace }}"
            targetNamespace: "{{ mtv_namespace }}"
            vms: "{{ vm_list }}"
            warm: true
            preserveStaticIPs: true

    - name: Get Plan UID
      kubernetes.core.k8s_info:
        api_version: forklift.konveyor.io/v1beta1
        kind: Plan
        name: "{{ plan_name }}"
        namespace: "{{ mtv_namespace }}"
      register: plan_info

    - name: Set Plan UID fact
      set_fact:
        plan_uid: "{{ plan_info.resources[0].metadata.uid }}"

    - name: Create NetworkMap with owner reference
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: NetworkMap
          metadata:
            name: "{{ network_map_name }}-{{ plan_name }}"
            namespace: "{{ mtv_namespace }}"
            ownerReferences:
              - apiVersion: forklift.konveyor.io/v1beta1
                kind: Plan
                name: "{{ plan_name }}"
                uid: "{{ plan_uid }}"
                controller: true
                blockOwnerDeletion: true
          spec:
            provider:
              source:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ source_provider_name }}"
                namespace: "{{ mtv_namespace }}"
              destination:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ destination_provider_name }}"
                namespace: "{{ mtv_namespace }}"
            map:
              - source:
                  type: vmware
                  name: "{{ migration_data[0]['Source Network'] | default('') }}"
                destination:
                  type: multus
                  name: "{{ migration_data[0]['Target Network'] | default('') }}"
                  namespace: "{{ target_network_namespace }}"

    - name: Create StorageMap with owner reference
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: StorageMap
          metadata:
            name: "{{ storage_map_name }}-{{ plan_name }}"
            namespace: "{{ mtv_namespace }}"
            ownerReferences:
              - apiVersion: forklift.konveyor.io/v1beta1
                kind: Plan
                name: "{{ plan_name }}"
                uid: "{{ plan_uid }}"
                controller: true
                blockOwnerDeletion: true
          spec:
            provider:
              source:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ source_provider_name }}"
                namespace: "{{ mtv_namespace }}"
              destination:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ destination_provider_name }}"
                namespace: "{{ mtv_namespace }}"
            map:
              - source:
                  type: vmware
                  name: "{{ migration_data[0]['Source Datastore'] | default('') }}"
                destination:
                  storageClass: "{{ migration_data[0]['Target StorageClass'] | default('') }}"
