---
- name: VM Migration Plan with multicolumn CSV input (AAP compatible)
  hosts: localhost
  gather_facts: false

  vars_files:
    - vars.yaml  # define your variables here, e.g. plan_name, mtv_namespace, etc.

  tasks:

    - name: Load raw CSV file as base64
      ansible.builtin.slurp:
        src: migration_plan.csv
      register: raw_csv

    - name: Decode CSV lines and remove empty lines
      set_fact:
        csv_lines: "{{ (raw_csv.content | b64decode).splitlines() | reject('equalto', '') | list }}"

    - name: Debug csv_lines to verify CSV content
      debug:
        var: csv_lines

    - name: Extract CSV header and rows
      set_fact:
        csv_header: "{{ csv_lines[0].split(',') | map('trim') | list }}"
        csv_rows: "{{ csv_lines[1:] }}"

    - name: Debug header and first data row
      debug:
        msg:
          header: "{{ csv_header }}"
          first_row: "{{ csv_rows[0] if csv_rows else 'No data rows' }}"

    - name: Convert CSV rows into list of dictionaries
      set_fact:
        parsed_csv: >-
          {% set result = [] %}
          {% for row in csv_rows %}
            {% set values = row.split(',') %}
            {% set item = {} %}
            {% for i in range(csv_header | length) %}
              {% set key = csv_header[i] %}
              {% set val = values[i] if i < (values | length) else '' %}
              {% set item = item | combine({key: val | trim}) %}
            {% endfor %}
            {% set result = result + [item] %}
          {% endfor %}
          {{ result }}

    - name: Debug parsed CSV data
      debug:
        var: parsed_csv

    - name: Build Forklift VM list from "RHOS Name" column
      set_fact:
        vm_list: "{{ parsed_csv | map(attribute='RHOS Name') | map('regex_replace', '^(.+)$', '{\"name\":\"\\1\"}') | map('from_json') | list }}"

    - name: Debug VM list
      debug:
        var: vm_list

    - name: Create Forklift Migration Plan
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: Plan
          metadata:
            name: "{{ plan_name }}"
            namespace: "{{ mtv_namespace }}"
          spec:
            provider:
              source:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ source_provider_name }}"
                namespace: "{{ mtv_namespace }}"
              destination:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ destination_provider_name }}"
                namespace: "{{ mtv_namespace }}"
            map:
              network:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: NetworkMap
                name: "{{ network_map_name }}-{{ plan_name }}"
                namespace: "{{ mtv_namespace }}"
              storage:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: StorageMap
                name: "{{ storage_map_name }}-{{ plan_name }}"
                namespace: "{{ mtv_namespace }}"
            namespace: "{{ mtv_namespace }}"
            targetNamespace: "{{ mtv_namespace }}"
            vms: "{{ vm_list }}"
            warm: true
            preserveStaticIPs: true

    - name: Get Plan UID
      kubernetes.core.k8s_info:
        api_version: forklift.konveyor.io/v1beta1
        kind: Plan
        name: "{{ plan_name }}"
        namespace: "{{ mtv_namespace }}"
      register: plan_info

    - name: Set Plan UID fact
      set_fact:
        plan_uid: "{{ plan_info.resources[0].metadata.uid }}"

    - name: Create NetworkMap with owner reference
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: NetworkMap
          metadata:
            name: "{{ network_map_name }}-{{ plan_name }}"
            namespace: "{{ mtv_namespace }}"
            ownerReferences:
              - apiVersion: forklift.konveyor.io/v1beta1
                kind: Plan
                name: "{{ plan_name }}"
                uid: "{{ plan_uid }}"
                controller: true
                blockOwnerDeletion: true
          spec:
            provider:
              source:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ source_provider_name }}"
                namespace: "{{ mtv_namespace }}"
              destination:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ destination_provider_name }}"
                namespace: "{{ mtv_namespace }}"
            map:
              - source:
                  type: vmware
                  name: "{{ parsed_csv[0]['Source Network'] | default('') }}"
                destination:
                  type: multus
                  name: "{{ parsed_csv[0]['Target Network'] | default('') }}"
                  namespace: "{{ target_network_namespace }}"

    - name: Create StorageMap with owner reference
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: StorageMap
          metadata:
            name: "{{ storage_map_name }}-{{ plan_name }}"
            namespace: "{{ mtv_namespace }}"
            ownerReferences:
              - apiVersion: forklift.konveyor.io/v1beta1
                kind: Plan
                name: "{{ plan_name }}"
                uid: "{{ plan_uid }}"
                controller: true
                blockOwnerDeletion: true
          spec:
            provider:
              source:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ source_provider_name }}"
                namespace: "{{ mtv_namespace }}"
              destination:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ destination_provider_name }}"
                namespace: "{{ mtv_namespace }}"
            map:
              - source:
                  type: vmware
                  name: "{{ parsed_csv[0]['Source Datastore'] | default('') }}"
                destination:
                  storageClass: "{{ parsed_csv[0]['Target StorageClass'] | default('') }}"
