---
- name: VM Migration Plan with manual CSV parsing (AAP compatible)
  hosts: localhost
  gather_facts: false

  vars_files:
    - vars.yaml  # External vars like plan_name, mtv_namespace, etc.

  tasks:
    - name: Read CSV content (base64)
      slurp:
        src: migration_plan.csv
      register: raw_csv

    - name: Decode and split CSV into lines
      set_fact:
        csv_lines: "{{ raw_csv.content | b64decode | regex_findall('.*') }}"

    - name: Extract CSV headers
      set_fact:
        csv_headers: "{{ csv_lines[0].split(',') | map('trim') | list }}"

    - name: Initialize empty migration_data list
      set_fact:
        migration_data: []

    - name: Convert each CSV row to dictionary and append to migration_data
      set_fact:
        migration_data: "{{ migration_data + [dict(csv_headers | zip(row | split(',') | map('trim') | list))] }}"
      loop: "{{ csv_lines[1:] }}"
      loop_control:
        loop_var: row
      when: row.strip() != ''

    - name: Group VMs by Plan Name
      set_fact:
        vms_by_plan: "{{ migration_data | groupby('Plan Name') | map(attribute='1') | zip(migration_data | groupby('Plan Name') | map(attribute='0')) | list | map('combine', [{'plan_name': item[0], 'vms': item[1]}]) }}"

    ##################################################################
    ## STEP 1: Create NetworkMap
    ##################################################################
    - name: Create NetworkMap
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: NetworkMap
          metadata:
            name: "{{ network_map_name }}-{{ item.plan_name }}"
            namespace: "{{ mtv_namespace }}"
          spec:
            provider:
              source:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ source_provider_name }}"
                namespace: "{{ mtv_namespace }}"
              destination:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ destination_provider_name }}"
                namespace: "{{ mtv_namespace }}"
            map:
              - destination:
                  name: "{{ target_networkmap }}"
                  namespace: "{{ target_network_namespace }}"
                  type: "multus"
                source:
                  id: "{{ source_networkmap_id  }}"

    ##################################################################
    ## STEP 2: Create StorageMap
    ##################################################################
    - name: Create StorageMap
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: StorageMap
          metadata:
            name: "{{ storage_map_name }}-{{ item.plan_name }}"
            namespace: "{{ mtv_namespace }}"
          spec:
            provider:
              source:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ source_provider_name }}"
                namespace: "{{ mtv_namespace }}"
              destination:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ destination_provider_name }}"
                namespace: "{{ mtv_namespace }}"
            map:
              - source:
                  type: vmware
                  name: "{{ source_storagemap }}"
                destination:
                  storageClass: "{{ target_storagemap }}"

    ##################################################################
    ## STEP 3: Create Forklift Migration Plan
    ##################################################################
    - name: Create Forklift Migration Plan
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: Plan
          metadata:
            name: "{{ item.plan_name }}"
            namespace: "{{ mtv_namespace }}"
          spec:
            provider:
              source:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ source_provider_name }}"
                namespace: "{{ mtv_namespace }}"
              destination:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ destination_provider_name }}"
                namespace: "{{ mtv_namespace }}"
            map:
              network:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: NetworkMap
                name: "{{ network_map_name }}-{{ item.plan_name }}"
                namespace: "{{ mtv_namespace }}"
              storage:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: StorageMap
                name: "{{ storage_map_name }}-{{ item.plan_name }}"
                namespace: "{{ mtv_namespace }}"
            namespace: "{{ mtv_namespace }}"
            targetNamespace: "{{ mtv_namespace }}"
            vms: "{{ item.vms | map(attribute='VM ID') | list }}"  # Get VM IDs for the vms field
            warm: true
            preserveStaticIPs: true

    ##################################################################
    ## STEP 4: Wait until Plan becomes Ready
    ##################################################################
    - name: Wait for migration plan to become Ready
      register: plan_info
      retries: 5
      delay: 3
      until: >
        plan_info.resources[0].status.conditions is defined and
        (
          plan_info.resources[0].status.conditions
          | selectattr('type', 'equalto', 'Ready')
          | selectattr('status', 'equalto', 'True')
          | list | length
        ) > 0
      failed_when: plan_info.resources | length == 0
      delegate_to: localhost
      kubernetes.core.k8s_info:
        api_version: forklift.konveyor.io/v1beta1
        kind: Plan
        name: "{{ plan_name }}"
        namespace: "{{ mtv_namespace }}"

    ##################################################################
    ## STEP 5: Add ownerReferences to the Maps (Optional Cleanup Logic)
    ##################################################################
    - name: Set Plan UID
      set_fact:
        plan_uid: "{{ plan_info.resources[0].metadata.uid }}"

    - name: Patch NetworkMap with ownerReferences
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: NetworkMap
          metadata:
            name: "{{ network_map_name }}-{{ plan_name }}"
            namespace: "{{ mtv_namespace }}"
            ownerReferences:
              - apiVersion: forklift.konveyor.io/v1beta1
                kind: Plan
                name: "{{ plan_name }}"
                uid: "{{ plan_uid }}"
                controller: true
                blockOwnerDeletion: true

    - name: Patch StorageMap with ownerReferences
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: StorageMap
          metadata:
            name: "{{ storage_map_name }}-{{ plan_name }}"
            namespace: "{{ mtv_namespace }}"
            ownerReferences:
              - apiVersion: forklift.konveyor.io/v1beta1
                kind: Plan
                name: "{{ plan_name }}"
                uid: "{{ plan_uid }}"
                controller: true
                blockOwnerDeletion: true
