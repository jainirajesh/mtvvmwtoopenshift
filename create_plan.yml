---
- name: VM Migration Plan from CSV with NetworkMap and StorageMap
  hosts: localhost
  gather_facts: false

  vars_files:
    - vars.yaml

  vars:
    csv_path: "{{ playbook_dir }}/migration_plan.csv"

  tasks:

    - name: Read raw CSV file
      ansible.builtin.slurp:
        src: migration_plan.csv
      register: raw_csv

    - name: Decode and split CSV lines
      set_fact:
        csv_lines: "{{ raw_csv.content | b64decode | split('\n') | select('match', '.*[^,]+.*') | list }}"

    - name: Parse CSV to list of dicts
      set_fact:
        csv_parsed: >-
          {{
            csv_lines[1:] | map('split', ',') |
            map('zip', csv_lines[0] | split(',')) |
            map('items') | map('list') |
            map('dict') | list
          }}

    - name: Show parsed CSV content
      ansible.builtin.debug:
        var: csv_parsed

    - name: Loop over each VM and create Plan
      vars:
        selected_vm_name: "{{ item['RHOS Name'] | default('') }}"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: Plan
          metadata:
            name: "{{ plan_name }}-{{ selected_vm_name | lower | replace(' ', '-') }}"
            namespace: "{{ mtv_namespace }}"
          spec:
            provider:
              source:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ source_provider_name }}"
                namespace: "{{ mtv_namespace }}"
              destination:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: Provider
                name: "{{ destination_provider_name }}"
                namespace: "{{ mtv_namespace }}"
            map:
              network:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: NetworkMap
                name: "{{ network_map_name }}-{{ plan_name }}"
                namespace: "{{ mtv_namespace }}"
              storage:
                apiVersion: forklift.konveyor.io/v1beta1
                kind: StorageMap
                name: "{{ storage_map_name }}-{{ plan_name }}"
                namespace: "{{ mtv_namespace }}"
            namespace: "{{ mtv_namespace }}"
            targetNamespace: "{{ mtv_namespace }}"
            vms:
              - name: "{{ selected_vm_name }}"
            warm: true
            preserveStaticIPs: true
      loop: "{{ csv_parsed }}"
      loop_control:
        label: "{{ item['RHOS Name'] }}"

    - name: Gather all created plans info
      kubernetes.core.k8s_info:
        api_version: forklift.konveyor.io/v1beta1
        kind: Plan
        namespace: "{{ mtv_namespace }}"
      register: all_plans_info

    - name: Create NetworkMap and StorageMap with owner references per Plan
      # Loop over all plans to create NetworkMap and StorageMap per plan
      vars:
        plan_list: "{{ all_plans_info.resources }}"
      # Create NetworkMap per plan
      loop: "{{ plan_list }}"
      loop_control:
        loop_var: plan_item
      block:

        - name: Set plan UID fact
          ansible.builtin.set_fact:
            plan_uid: "{{ plan_item.metadata.uid }}"
            current_plan_name: "{{ plan_item.metadata.name }}"

        - name: Create NetworkMap with owner reference
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: forklift.konveyor.io/v1beta1
              kind: NetworkMap
              metadata:
                name: "{{ network_map_name }}-{{ current_plan_name }}"
                namespace: "{{ mtv_namespace }}"
                ownerReferences:
                  - apiVersion: forklift.konveyor.io/v1beta1
                    kind: Plan
                    name: "{{ current_plan_name }}"
                    uid: "{{ plan_uid }}"
                    controller: true
                    blockOwnerDeletion: true
              spec:
                provider:
                  source:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: Provider
                    name: "{{ source_provider_name }}"
                    namespace: "{{ mtv_namespace }}"
                  destination:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: Provider
                    name: "{{ destination_provider_name }}"
                    namespace: "{{ mtv_namespace }}"
                map:
                  - destination:
                      name: "{{ target_networkmap }}"
                      namespace: "{{ target_network_namespace }}"
                      type: "multus"
                    source:
                      type: vmware
                      name: "{{ source_networkmap }}"

        - name: Create StorageMap with owner reference
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: forklift.konveyor.io/v1beta1
              kind: StorageMap
              metadata:
                name: "{{ storage_map_name }}-{{ current_plan_name }}"
                namespace: "{{ mtv_namespace }}"
                ownerReferences:
                  - apiVersion: forklift.konveyor.io/v1beta1
                    kind: Plan
                    name: "{{ current_plan_name }}"
                    uid: "{{ plan_uid }}"
                    controller: true
                    blockOwnerDeletion: true
              spec:
                provider:
                  source:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: Provider
                    name: "{{ source_provider_name }}"
                    namespace: "{{ mtv_namespace }}"
                  destination:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: Provider
                    name: "{{ destination_provider_name }}"
                    namespace: "{{ mtv_namespace }}"
                map:
                  - source:
                      type: vmware
                      name: "{{ source_storagemap }}"
                    destination:
                      storageClass: "{{ target_storagemap }}"
