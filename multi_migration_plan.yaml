---
- name: Create multiple VM Migration Plans from CSV (AAP-compatible)
  hosts: localhost
  gather_facts: false

  vars_files:
    - vars.yaml  # contains: mtv_namespace, source_provider_name, destination_provider_name

  tasks:
    - name: Read CSV file (base64)
      slurp:
        src: migration_plan.csv
      register: raw_csv

    - name: Decode and split CSV into lines
      set_fact:
        csv_lines: "{{ raw_csv.content | b64decode | regex_findall('.*') }}"

    - name: Extract CSV headers
      set_fact:
        csv_headers: "{{ csv_lines[0].split(',') | map('trim') | list }}"

    - name: Initialize empty migration_data list
      set_fact:
        migration_data: []

    - name: Convert each CSV row to dict and add to migration_data
      set_fact:
        migration_data: "{{ migration_data + [dict(csv_headers | zip(row.split(',') | map('trim') | list))] }}"
      loop: "{{ csv_lines[1:] }}"
      loop_control:
        loop_var: row
      when: row.strip() != ''

    - name: Group migration data by Plan Name
      set_fact:
        grouped_plans: "{{ migration_data | groupby('Plan Name') | items2dict(key_name='plan_name', value_name='vms') }}"

    - name: Loop over each plan group and create resources
      block:
        - name: Build VM list for plan {{ plan_group.key }}
          set_fact:
            vm_list: >-
              {{ plan_group.value | map(attribute='RHOS Name') |
                 map('regex_replace', '^(.+)$', '{"name":"\1"}') |
                 map('from_json') | list }}

        - name: Set derived variables for plan {{ plan_group.key }}
          set_fact:
            plan_name: "{{ plan_group.key }}"
            network_map_name: "nm-{{ plan_group.key }}"
            storage_map_name: "sm-{{ plan_group.key }}"
            target_namespace: "{{ plan_group.value[0]['Target Namespace'] }}"
            target_storagemap: "{{ plan_group.value[0]['Target Storage'] }}"
            source_networkmap_id: "dvportgroup-1008"  # replace with dynamic lookup if needed
            target_networkmap: "nad"
            target_network_namespace: "default"

        - name: Create NetworkMap
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: forklift.konveyor.io/v1beta1
              kind: NetworkMap
              metadata:
                name: "{{ network_map_name }}"
                namespace: "{{ mtv_namespace }}"
              spec:
                provider:
                  source:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: Provider
                    name: "{{ source_provider_name }}"
                    namespace: "{{ mtv_namespace }}"
                  destination:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: Provider
                    name: "{{ destination_provider_name }}"
                    namespace: "{{ mtv_namespace }}"
                map:
                  - destination:
                      name: "{{ target_networkmap }}"
                      namespace: "{{ target_network_namespace }}"
                      type: "multus"
                    source:
                      id: "{{ source_networkmap_id }}"

        - name: Create StorageMap
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: forklift.konveyor.io/v1beta1
              kind: StorageMap
              metadata:
                name: "{{ storage_map_name }}"
                namespace: "{{ mtv_namespace }}"
              spec:
                provider:
                  source:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: Provider
                    name: "{{ source_provider_name }}"
                    namespace: "{{ mtv_namespace }}"
                  destination:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: Provider
                    name: "{{ destination_provider_name }}"
                    namespace: "{{ mtv_namespace }}"
                map:
                  - source:
                      type: vmware
                      name: "{{ plan_group.value[0]['Target Storage'] }}"
                    destination:
                      storageClass: "{{ plan_group.value[0]['Target Storage'] }}"

        - name: Create Migration Plan
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: forklift.konveyor.io/v1beta1
              kind: Plan
              metadata:
                name: "{{ plan_name }}"
                namespace: "{{ mtv_namespace }}"
              spec:
                provider:
                  source:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: Provider
                    name: "{{ source_provider_name }}"
                    namespace: "{{ mtv_namespace }}"
                  destination:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: Provider
                    name: "{{ destination_provider_name }}"
                    namespace: "{{ mtv_namespace }}"
                map:
                  network:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: NetworkMap
                    name: "{{ network_map_name }}"
                    namespace: "{{ mtv_namespace }}"
                  storage:
                    apiVersion: forklift.konveyor.io/v1beta1
                    kind: StorageMap
                    name: "{{ storage_map_name }}"
                    namespace: "{{ mtv_namespace }}"
                namespace: "{{ mtv_namespace }}"
                targetNamespace: "{{ target_namespace }}"
                vms: "{{ vm_list }}"
                warm: true
                preserveStaticIPs: true

        - name: Wait for migration plan {{ plan_name }} to become Ready
          retries: 20
          delay: 10
          until: >-
            plan_info.resources[0].status.conditions is defined and
            (
              plan_info.resources[0].status.conditions
              | selectattr('type', 'equalto', 'Ready')
              | selectattr('status', 'equalto', 'True')
              | list | length
            ) > 0
          block:
            - name: Get Plan status
              kubernetes.core.k8s_info:
                api_version: forklift.konveyor.io/v1beta1
                kind: Plan
                name: "{{ plan_name }}"
                namespace: "{{ mtv_namespace }}"
              register: plan_info
      loop: "{{ grouped_plans | dict2items }}"
      loop_control:
        loop_var: plan_group
