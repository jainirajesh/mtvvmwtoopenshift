---
- name: Create COLD migration plans from CSV
  hosts: localhost
  gather_facts: false

  vars_files:
    - vars.yaml

  tasks:
    - name: Read CSV content (base64)
      slurp:
        src: vm_list_to_migrate.csv
      register: raw_csv

    - name: Decode and split CSV into lines
      set_fact:
        csv_lines: "{{ raw_csv.content | b64decode | regex_findall('.*') }}"

    - name: Extract CSV headers
      set_fact:
        csv_headers: "{{ csv_lines[0].split(',') | map('trim') | list }}"

    - name: Parse each row into a dictionary
      set_fact:
        all_rows: "{{ all_rows | default([]) + [dict(csv_headers | zip(row.split(',') | map('trim') | list))] }}"
      loop: "{{ csv_lines[1:] }}"
      loop_control:
        loop_var: row
      when: row.strip() != ''

    - name: Filter only cold rows
      set_fact:
        cold_rows: "{{ all_rows | selectattr('Cold or Warm', 'equalto', 'cold') | list }}"

    - name: Group cold VMs by Plan Name
      set_fact:
        cold_plans_dict: "{{ cold_rows | groupby('Plan Name') | items2dict(key_name=0, value_name=1) }}"

    - name: Format cold plans structure with vms and rows
      set_fact:
        plans_with_vms: >-
          {{
            cold_plans_dict
            | dict2items
            | map('combine', {
                'key': item.key,
                'value': {
                  'rows': item.value,
                  'vms': item.value
                         | map('extract', ['RHOS Name', 'VM ID'])
                         | map('community.general.dict_kv', 'name', 'id')
                         | list,
                  'is_warm': false
                }
              })
            | list
          }}

    - name: Loop over each cold plan group and create them
      include_tasks: create_single_plan.yaml
      loop: "{{ plans_with_vms }}"
      loop_control:
        loop_var: plan_group
