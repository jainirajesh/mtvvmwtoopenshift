- name: Create warm migration plans from CSV
  hosts: localhost
  gather_facts: false

  vars_files:
    - vars.yaml

  tasks:
    - name: Read CSV content (base64)
      slurp:
        src: vm_list_to_migrate.csv
      register: raw_csv

    - name: Decode and split CSV into lines
      set_fact:
        csv_lines: "{{ raw_csv.content | b64decode | regex_findall('.*') }}"

    - name: Extract CSV headers
      set_fact:
        csv_headers: "{{ csv_lines[0].split(',') | map('trim') | list }}"

    - name: Parse and filter warm plans
      set_fact:
        warm_rows: >-
          {{
            csv_lines[1:]
            | map('trim')
            | reject('equalto', '')
            | map('split', ',')
            | map('map', 'trim')
            | map('list')
            | map('zip', csv_headers)
            | map('dict')
            | selectattr('Cold or Warm', 'equalto', 'warm')
            | list
          }}

    - name: Group warm VMs by Plan Name
      set_fact:
        warm_plans_dict: "{{ warm_plans_dict | default({}) | combine({ item['Plan Name']: (warm_plans_dict[item['Plan Name']] | default([])) + [item] }) }}"
      loop: "{{ warm_rows }}"
      loop_control:
        label: "{{ item['Plan Name'] }}"

    - name: Prepare data for warm plans
      set_fact:
        warm_plans_with_vms: "{{ warm_plans_with_vms | default({}) | combine({ item.key: { 'vms': vm_list, 'rows': item.value, 'is_warm': true } }) }}"
      vars:
        vm_list: >-
          {% set result = [] %}
          {% for row in item.value %}
          {% set _ = result.append({ 'name': row['RHOS Name'], 'id': row['VM ID'] }) %}
          {% endfor %}
          {{ result }}
      loop: "{{ warm_plans_dict | dict2items }}"

    - name: Create warm plans
      include_tasks: create_single_plan.yaml
      loop: "{{ warm_plans_with_vms | dict2items }}"
      loop_control:
        loop_var: plan_group
