---
- name: Create migration plans only from survey-selected Plan Names
  hosts: localhost
  gather_facts: false

  vars_files:
    - vars.yaml

  vars:
    # ðŸ‘‡ Injected via Controller Survey
    plan_names_from_survey: []  # Example: ["win-plan-02", "lin-plan-00002"]

  tasks:
    - name: Read CSV content (base64)
      slurp:
        src: vm_list_to_migrate.csv
      register: raw_csv

    - name: Decode and split CSV into lines
      set_fact:
        csv_lines: "{{ raw_csv.content | b64decode | regex_findall('.*') }}"

    - name: Extract CSV headers
      set_fact:
        csv_headers: "{{ csv_lines[0].split(',') | map('trim') | list }}"

    - name: Parse each row into a dictionary
      set_fact:
        all_rows: "{{ all_rows | default([]) + [dict(csv_headers | zip(row.split(',') | map('trim') | list))] }}"
      loop: "{{ csv_lines[1:] }}"
      loop_control:
        loop_var: row
      when: row.strip() != ''

    - name: Filter rows based on selected plan names from survey
      set_fact:
        filtered_rows: "{{ all_rows | selectattr('Plan Name', 'in', plan_names_from_survey) | list }}"

    - name: Debug - Show filtered rows (optional)
      debug:
        var: filtered_rows

    - name: Group VMs by Plan Name
      set_fact:
        plans_dict: "{{ plans_dict | default({}) | combine({ item['Plan Name']: (plans_dict[item['Plan Name']] | default([])) + [item] }) }}"
      loop: "{{ filtered_rows }}"
      loop_control:
        label: "{{ item['Plan Name'] }}"

    - name: Build plans_with_vms with VM info and warm/cold/preserveIP flags
      set_fact:
        plans_with_vms: "{{ plans_with_vms | default({}) | combine({ item.key: {
          'rows': item.value,
          'vms': (
            item.value |
            map('extract', ['RHOS Name', 'VM ID']) |
            map('zip', ['name', 'id']) |
            map('dict') |
            list
          ),
          'is_warm': (item.value[0]['Cold or Warm'] | lower) == 'warm',
          'preserve_ips': (item.value[0]['Keep IP'] | lower | trim) == 'yes'
        } }) }}"
      loop: "{{ plans_dict | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

    - name: Loop over each selected plan and create
      include_tasks: r_create_single_plan.yml
      loop: "{{ plans_with_vms | dict2items }}"
      loop_control:
        loop_var: plan_group
      vars:
        plan_group: "{{ plan_group }}"
