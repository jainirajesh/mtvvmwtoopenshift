- name: Set plan variables
  set_fact:
    current_plan_name: "{{ plan_group.key }}"
    current_vm_list: "{{ plan_group.value | map(attribute='RHOS Name') | map('regex_replace', '^(.+)$', '{\"name\":\"\\1\"}') | map('from_json') | list }}"
    current_namespace: "{{ plan_group.value[0]['Target Namespace'] }}"
    current_storage: "{{ plan_group.value[0]['Target Storage'] }}"
    is_warm: "{{ plan_group.value[0]['Cold or Warm'] == 'warm' }}"
    keep_ip: "{{ plan_group.value[0]['Keep IP'] == 'yes' }}"

- name: Create Forklift Migration Plan
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: Plan
      metadata:
        name: "{{ current_plan_name }}"
        namespace: "{{ mtv_namespace }}"
      spec:
        provider:
          source:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ source_provider_name }}"
            namespace: "{{ mtv_namespace }}"
          destination:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ destination_provider_name }}"
            namespace: "{{ mtv_namespace }}"
        map:
          network:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: NetworkMap
            name: "{{ network_map_name }}-{{ current_plan_name }}"
            namespace: "default"
          storage:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: StorageMap
            name: "{{ storage_map_name }}-{{ current_plan_name }}"
            namespace: "{{ mtv_namespace }}"
        namespace: "{{ mtv_namespace }}"
        targetNamespace: "{{ mtv_namespace }}"
        vms: "{{ current_vm_list }}"
        warm: "{{ is_warm }}"
        preserveStaticIPs: "{{ keep_ip }}"

- name: Get Plan UID
  kubernetes.core.k8s_info:
    api_version: forklift.konveyor.io/v1beta1
    kind: Plan
    name: "{{ current_plan_name }}"
    namespace: "{{ mtv_namespace }}"
  register: plan_info

- name: Set Plan UID fact
  set_fact:
    plan_uid: "{{ plan_info.resources[0].metadata.uid }}"

- name: Create NetworkMap with owner reference
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: NetworkMap
      metadata:
        name: "{{ network_map_name }}-{{ current_plan_name }}"
        namespace: "default"
        ownerReferences:
          - apiVersion: forklift.konveyor.io/v1beta1
            kind: Plan
            name: "{{ current_plan_name }}"
            uid: "{{ plan_uid }}"
            controller: true
            blockOwnerDeletion: true
      spec:
        provider:
          source:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ source_provider_name }}"
            namespace: "{{ mtv_namespace }}"
          destination:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ destination_provider_name }}"
            namespace: "{{ mtv_namespace }}"
        map:
          - source:
              id: "{{ source_networkmap_id }}"
            destination:
              type: multus
              name: "{{ target_networkmap }}"
              namespace: "{{ target_network_namespace }}"

- name: Create StorageMap with owner reference
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: forklift.konveyor.io/v1beta1
      kind: StorageMap
      metadata:
        name: "{{ storage_map_name }}-{{ current_plan_name }}"
        namespace: "{{ mtv_namespace }}"
        ownerReferences:
          - apiVersion: forklift.konveyor.io/v1beta1
            kind: Plan
            name: "{{ current_plan_name }}"
            uid: "{{ plan_uid }}"
            controller: true
            blockOwnerDeletion: true
      spec:
        provider:
          source:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ source_provider_name }}"
            namespace: "{{ mtv_namespace }}"
          destination:
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            name: "{{ destination_provider_name }}"
            namespace: "{{ mtv_namespace }}"
        map:
          - source:
              type: vmware
              name: "{{ source_storagemap }}"
            destination:
              storageClass: "{{ target_storagemap }}"
