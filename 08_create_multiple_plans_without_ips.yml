---
- name: Create migration plans from CSV with dynamic IP preservation
  hosts: localhost
  gather_facts: false

  vars_files:
    - vars.yaml

  tasks:
    - name: Read CSV content (base64)
      slurp:
        src: vm_list_to_migrate.csv
      register: raw_csv

    - name: Decode and split CSV into lines
      set_fact:
        csv_lines: "{{ raw_csv.content | b64decode | regex_findall('.*') }}"

    - name: Extract CSV headers
      set_fact:
        csv_headers: "{{ csv_lines[0].split(',') | map('trim') | list }}"

    - name: Parse each row into a dictionary
      set_fact:
        all_rows: "{{ all_rows | default([]) + [dict(csv_headers | zip(row.split(',') | map('trim') | list))] }}"
      loop: "{{ csv_lines[1:] }}"
      loop_control:
        loop_var: row
      when: row.strip() != ''

    - name: Group VMs by Plan Name
      set_fact:
        plans_dict: "{{ plans_dict | default({}) | combine({ item['Plan Name']: (plans_dict[item['Plan Name']] | default([])) + [item] }) }}"
      loop: "{{ all_rows }}"
      loop_control:
        label: "{{ item['Plan Name'] }}"

    - name: Format plans with warm flag and IP preservation
      set_fact:
        plans_with_vms: "{{ plans_with_vms | default({}) | combine({ item.key: {
            'rows': item.value,
            'vms': (
              item.value |
              map('extract', ['RHOS Name', 'VM ID']) |
              map('community.general.dict_kv', 'name', 'id') |
              list
            ),
            'is_warm': (item.value[0]['Cold or Warm'] | lower) == 'warm'
        }}) }}"
      loop: "{{ plans_dict | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      vars:
        # Ensures 'dict_kv' is available
        ansible_python_interpreter: "{{ ansible_playbook_python }}"

    - name: Loop over each plan group and create plans
      include_tasks: create_single_plan.yaml
      loop: "{{ plans_with_vms | dict2items }}"
      loop_control:
        loop_var: plan_group
      vars:
        plan_group: "{{ plan_group }}"
