- name: Start Multiple Migration Plans from CSV based on sync time (with polling)
  hosts: localhost
  gather_facts: false
  vars:
    csv_file: "r_vm_list_to_migrate.csv"

  tasks:
    - name: Read CSV content (base64)
      slurp:
        src: "{{ csv_file }}"
      register: raw_csv

    - name: Decode and split CSV into lines
      set_fact:
        csv_lines: "{{ raw_csv.content | b64decode | regex_findall('.*') }}"

    - name: Extract CSV headers
      set_fact:
        csv_headers: "{{ csv_lines[0].split(',') | map('trim') | list }}"

    - name: Parse each row into a dictionary
      set_fact:
        all_rows: "{{ all_rows | default([]) + [dict(csv_headers | zip(row.split(',') | map('trim') | list))] }}"
      loop: "{{ csv_lines[1:] }}"
      loop_control:
        loop_var: row
      when: row.strip() != ''

    - name: Build unique plan list (Plan Name + Target Namespace)
      set_fact:
        unique_plans: "{{ unique_plans | default([]) + [ {'Plan Name': item['Plan Name'], 'Target Namespace': item['Target Namespace'], 'Cold or Warm': item['Cold or Warm'], 'Sync Time': item['Sync Time']} ] }}"
      loop: "{{ all_rows }}"
      when: item['Plan Name'] not in (unique_plans | default([]) | map(attribute='Plan Name') | list)
      loop_control:
        label: "{{ item['Plan Name'] }}"

    - name: Poll and wait until sync time reached per plan
      vars:
        target_time: "{{ item['Sync Time'] | to_datetime('%Y-%m-%d %H:%M:%S') }}"
        current_time: ""
      until: current_time >= target_time
      retries: 10000       # max retries (~ 10000 * delay seconds)
      delay: 60           # wait 60 seconds between checks
      block:
        - name: Get current UTC time
          command: date -u +%Y-%m-%dT%H:%M:%S
          register: current_time_cmd

        - name: Set current time fact
          set_fact:
            current_time: "{{ current_time_cmd.stdout | to_datetime('%Y-%m-%dT%H:%M:%S') }}"

        - name: Show polling status
          debug:
            msg: "Waiting to start '{{ item['Plan Name'] }}' migration. Current time: {{ current_time }} Target time: {{ target_time }}"
      loop: "{{ unique_plans }}"
      loop_control:
        label: "{{ item['Plan Name'] }}"
      when: item['Sync Time'] is defined and item['Sync Time'] != ''

    - name: Start Migration Plan for each unique Plan Name and Namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: forklift.konveyor.io/v1beta1
          kind: Migration
          metadata:
            generateName: "{{ item['Plan Name'] }}-migration-"
            namespace: "{{ item['Target Namespace'] }}"
          spec:
            plan:
              name: "{{ item['Plan Name'] }}"
              namespace: "{{ item['Target Namespace'] }}"
      loop: "{{ unique_plans }}"
      loop_control:
        label: "{{ item['Plan Name'] }}"
      when:
        - (item['Cold or Warm'] | lower == 'warm' or item['Cold or Warm'] == 'WARM')
        - item['Plan Name'] is defined and item['Plan Name'] != ''
        - item['Sync Time'] is defined and item['Sync Time'] != ''
